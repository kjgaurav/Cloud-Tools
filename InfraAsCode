1. Ansible

Ansible is an open source IT Configuration Management, Deployment & Orchestration tool. It aims to provide large productivity gains to a wide variety of automation challenges. This tool is very simple to use yet powerful enough to automate complex multi-tier IT application environments.

Key Features:

1. Simple: Ansible uses a simple syntax written in YAML called playbooks. YAML is a human-readable data serialization language.
2. Agentless: Finally, Ansible is completely agentless. There are no agents/software or additional firewall ports that you need to install on the  client systems or hosts which you want to automate.
3. Powerful & Flexible: Ansible has powerful features that can enable us to model even the most complex IT workflows.
4. Configuration Management : Ansible is designed to be very simple, reliable and consistent for configuration management. 
5. Orchestration: Ansible provides Orchestration in the sense of aligning the business request with the applications, data, and infrastructure.
6. Security and Compliance: When we define our security policy in Ansible, scanning and remediation of site-wide security policy can be integrated into other automated processes. And it’ll be integral in everything that is deployed. It means that, you need to configure your security details once in your control machine and it will be embedded in all other nodes automatically. 
7. Application Deployment: When we define our application with Ansible, and manage the deployment with Ansible Tower, teams are able to effectively manage the entire application life cycle from development to production.

2. Chef

Chef is an automation tool that provides a way to define infrastructure as code. Infrastructure as code (IAC) simply means that managing infrastructure by writing code (Automating infrastructure) rather than using manual processes. It can also be termed as programmable infrastructure. Chef uses a pure-Ruby, domain-specific language (DSL) for writing system configurations. Below are the types of automation done by Chef, irrespective of the size of infrastructure:

    Infrastructure configuration
    Application deployment 
    Configurations are managed across your network
    
1. Chef uses popular Ruby language to create a domain-specific language.
2. Chef does not make assumptions on the current status of a node. It uses its mechanisms to get the current status of machine.
3. Chef is ideal for deploying and managing the cloud server, storage, and software.
4. Lower barrier for entry − As Chef uses native Ruby language for configuration, a standard configuration language it can be easily picked up by anyone having some development experience.
5. Excellent integration with cloud − Using the knife utility, it can be easily integrated with any of the cloud technologies. It is the best tool for an organization that wishes to distribute its infrastructure on multi-cloud environment.

3. Puppet

Puppet is a Configuration Management tool that is used for deploying, configuring and managing servers. It performs the following functions:

    Defining distinct configurations for each and every host, and continuously checking and confirming whether the required configuration is in place and is not altered (if altered Puppet will revert back to the required configuration) on the host.
    Dynamic scaling-up and scaling-down of machines.
    Providing control over all your configured machines, so a centralized (master-server or repo-based) change gets propagated to all, automatically.

1. Infrastructure automation :Define and continually enforce IT configurations no matter where your infrastructure lives.
2. Automated provisioning : Automate provisioning across your heterogeneous IT infrastructure.
3. Application release automation : Get full control over and visibility over your software delivery process.
4. Task management :Make changes or remediate urgent problems alongside your model-driven automation management.
5. Visualization & reporting : Gain insight into your infrastructure, audit changes, and get rich reporting in a full-featured graphical console.
6. Orchestration : Orchestrate change with control, visibility, and automated intelligence. 
7. Code management : Manage infrastructure as code using your favorite version control systems to better enable continuous delivery.
8. Node management :Define your infrastructure as code and save yourself the manual work of classifying and managing nodes.
9. Discovery & insights : Quickly discover resources that need automated management, and drive change with confidence.
10. Role-based access control : Assign permissions to teams in line with company and regulatory policies.
11. Support, services & training : Get access to world-class education, training and support to get up and running faster.


4. Terraform

Terraform is a tool for building, changing and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.

1. Infrastructure as Code: The infrastructure is described using an advanced configuration language. It can be changed, shared and re-used.
2. Execution Plans: Terraform has a planning strategy where it executes a dry run to the configuration. It shows the changes to be made to infrastructure even before making the actual changes.
3. Resource Graph: The tool creates a graph of all the resources and shows the dependency on one another.
4. Change Automation: The changes can be made to your infrastructure with very less human intervention avoiding possible human error.
5. Orchestration: All the configuration management tools were created for server configuration and their primary goal was to install and manage the software already existed in the server / virtual machine.
6. Multi-Provider: This is the most versatile feature of Terraform that it supports multi-cloud orchestration such as AWS, Azure, OpenStack, etc as well as on-premises deployments
7. Immutable infrastructure: When Chef, Salt, Puppet, and Ansible runs any software updates on servers, this can quite often lead to a configuration drift when differences in the configuration lead to bugs that can lead to security breaches. 
8. Syntax: Terraform uses a custom language known as HCL (HashiCorp Configuration Language). This language was designed to compromise the human readable and the machine friendly languages.
9. Dry Runs: One another advantages of Terraform is that it supports something called Plan. This looks at the Terraform file and determines the changes you are going to make in the infrastructure before actually making it.
10. Client-only architecture: Terraform leverages the cloud provider’s API for provisioning the infrastructure which eliminates the need for additional checks and also running the configuration management system in a separate server. 
11. Super Portability: You have only one tool and one language for describing the infrastructure for multiple cloud providers. Migrating to vendors is not a problem anymore. 


Infrastructure as Code: Chef, Ansible, Puppet, or Terraform?

Configuration management

Generally, Ansible, Puppet and Chef are considered to be configuration management (CM) tools and were created to install and manage software on existing server instances (e.g., installation of packages, starting of services, installing scripts or config files on the instance). They do the heavy lifting of making one or many instances perform their roles without the user needing to specify the exact commands. No more manual configuration or ad-hoc scripts are needed.

Configuration orchestration

Tools like Terraform are considered to be orchestrators. They are designed to provision the server instances themselves, leaving the job of configuring those servers to other tools. Orchestration addresses the requirement to provision environments at a higher level than configuration management. The focus here is on coordinating configuration across complex environments and clusters.

Chef and Ansible use a procedural style language where you write code that specifies, step-by-step, how to achieve the desired end state.
The onus is on the user to determine the optimal deployment process. Terraform, and Puppet use a declarative style where you write code that specifies the desired end state. The IaC tool itself then determines how to achieve that state in the most efficient way possible. Procedural languages are more familiar to system admins who have backgrounds in scripting. Declarative tools are more familiar to users with a programming background.


Mutable or immutable? Traditional server environments are mutable, in that they are changed after they are installed. Administrators are always making tweaks or adding code. CM tools evolved to manage this complexity and bring order to the configuration and updating of tens to thousands of servers. An immutable infrastructure is one in which servers are never modified after they’re deployed. If something needs to be updated or changed, new servers are built afresh from a common template with the desired changes. This is the world of Terraform, where new servers replace the existing servers. This is also the philosophy of containers. With orchestration, immutability is easily applied to servers as they usually have built-in support for managing the lifecycle of a resource from creation to tearing down.

Cloud environments continue to grow in complexity, the need for orchestration increases.
The growing requirement is for coordination of components and the management of the dependencies between the config of one service
and another. Immutability avoids certain issues like configuration drift and problematic snowflake servers.
Think “cattle” and not “pets.” However, to reap the benefits requires deployment automation, rapid server provisioning,
and the handling of stateful data and ephemeral logs. This means one tool focused on infrastructure orchestration and 
another on applications. This brings together the benefits of a focused orchestration tool such as Terraform along with a wide choice 
of configuration management tools. This is one of the beauties of Terraform—it can easily work with your config management tool 
of choice to provide customized application delivery while maintaining the benefits of immutability.

URLS:
https://www.intigua.com/blog/puppet-vs.-chef-vs.-ansible-vs.-saltstack
https://www.edureka.co/blog/chef-vs-puppet-vs-ansible-vs-saltstack/
https://www.linkedin.com/pulse/very-short-comparison-ansible-chef-puppet-saltstack-niels-goossens
https://gist.github.com/jaceklaskowski/bd3d06489ec004af6ed9
