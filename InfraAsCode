1. Ansible

Ansible is an open source IT Configuration Management, Deployment & Orchestration tool. It aims to provide large productivity gains to a wide variety of automation challenges. This tool is very simple to use yet powerful enough to automate complex multi-tier IT application environments.

Key Features:

1. Simple: Ansible uses a simple syntax written in YAML called playbooks. YAML is a human-readable data serialization language.
2. Agentless: Finally, Ansible is completely agentless. There are no agents/software or additional firewall ports that you need to install on the  client systems or hosts which you want to automate.
3. Powerful & Flexible: Ansible has powerful features that can enable us to model even the most complex IT workflows.
4. Configuration Management : Ansible is designed to be very simple, reliable and consistent for configuration management. 
5. Orchestration: Ansible provides Orchestration in the sense of aligning the business request with the applications, data, and infrastructure.
6. Security and Compliance: When we define our security policy in Ansible, scanning and remediation of site-wide security policy can be integrated into other automated processes. And it’ll be integral in everything that is deployed. It means that, you need to configure your security details once in your control machine and it will be embedded in all other nodes automatically. 
7. Application Deployment: When we define our application with Ansible, and manage the deployment with Ansible Tower, teams are able to effectively manage the entire application life cycle from development to production.

2. Chef

Chef is an automation tool that provides a way to define infrastructure as code. Infrastructure as code (IAC) simply means that managing infrastructure by writing code (Automating infrastructure) rather than using manual processes. It can also be termed as programmable infrastructure. Chef uses a pure-Ruby, domain-specific language (DSL) for writing system configurations. Below are the types of automation done by Chef, irrespective of the size of infrastructure:

    Infrastructure configuration
    Application deployment 
    Configurations are managed across your network
    
1. Chef uses popular Ruby language to create a domain-specific language.
2. Chef does not make assumptions on the current status of a node. It uses its mechanisms to get the current status of machine.
3. Chef is ideal for deploying and managing the cloud server, storage, and software.
4. Lower barrier for entry − As Chef uses native Ruby language for configuration, a standard configuration language it can be easily picked up by anyone having some development experience.
5. Excellent integration with cloud − Using the knife utility, it can be easily integrated with any of the cloud technologies. It is the best tool for an organization that wishes to distribute its infrastructure on multi-cloud environment.

3. Puppet

Puppet is a Configuration Management tool that is used for deploying, configuring and managing servers. It performs the following functions:

    Defining distinct configurations for each and every host, and continuously checking and confirming whether the required configuration is in place and is not altered (if altered Puppet will revert back to the required configuration) on the host.
    Dynamic scaling-up and scaling-down of machines.
    Providing control over all your configured machines, so a centralized (master-server or repo-based) change gets propagated to all, automatically.

1. Infrastructure automation :Define and continually enforce IT configurations no matter where your infrastructure lives.
2. Automated provisioning : Automate provisioning across your heterogeneous IT infrastructure.
3. Application release automation : Get full control over and visibility over your software delivery process.
4. Task management :Make changes or remediate urgent problems alongside your model-driven automation management.
5. Visualization & reporting : Gain insight into your infrastructure, audit changes, and get rich reporting in a full-featured graphical console.
6. Orchestration : Orchestrate change with control, visibility, and automated intelligence. 
7. Code management : Manage infrastructure as code using your favorite version control systems to better enable continuous delivery.
8. Node management :Define your infrastructure as code and save yourself the manual work of classifying and managing nodes.
9. Discovery & insights : Quickly discover resources that need automated management, and drive change with confidence.
10. Role-based access control : Assign permissions to teams in line with company and regulatory policies.
11. Support, services & training : Get access to world-class education, training and support to get up and running faster.


4. Terraform
